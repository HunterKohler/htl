#include <gtest/gtest.h>
#include <hlib/crypto/md5.h>

namespace hlib::test {

using ByteVector = std::vector<std::uint8_t>;
using ByteVectorPair = std::pair<ByteVector, ByteVector>;

const std::vector<ByteVectorPair> md5_test_data{
    {
        {},
        { 0xD4, 0x1D, 0x8C, 0xD9, 0x8F, 0x00, 0xB2, 0x04, 0xE9, 0x80, 0x09,
          0x98, 0xEC, 0xF8, 0x42, 0x7E },
    },
    {
        { 0x61 },
        { 0x0C, 0xC1, 0x75, 0xB9, 0xC0, 0xF1, 0xB6, 0xA8, 0x31, 0xC3, 0x99,
          0xE2, 0x69, 0x77, 0x26, 0x61 },
    },
    {
        { 0x61, 0x62, 0x63 },
        { 0x90, 0x01, 0x50, 0x98, 0x3C, 0xD2, 0x4F, 0xB0, 0xD6, 0x96, 0x3F,
          0x7D, 0x28, 0xE1, 0x7F, 0x72 },
    },
    {
        { 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x64, 0x69, 0x67,
          0x65, 0x73, 0x74 },
        { 0xF9, 0x6B, 0x69, 0x7D, 0x7C, 0xB7, 0x93, 0x8D, 0x52, 0x5A, 0x2F,
          0x31, 0xAA, 0xF1, 0x61, 0xD0 },
    },
    {
        { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
          0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72,
          0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A },
        { 0xC3, 0xFC, 0xD3, 0xD7, 0x61, 0x92, 0xE4, 0x00, 0x7D, 0xFB, 0x49,
          0x6C, 0xCA, 0x67, 0xE1, 0x3B },
    },
    {
        { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B,
          0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56,
          0x57, 0x58, 0x59, 0x5A, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72,
          0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x30, 0x31, 0x32,
          0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39 },
        { 0xD1, 0x74, 0xAB, 0x98, 0xD2, 0x77, 0xD9, 0xF5, 0xA5, 0x61, 0x1C,
          0x2C, 0x9F, 0x41, 0x9D, 0x9F },
    },
    {
        { 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
          0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
          0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
          0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
          0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
          0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
          0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
          0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30 },
        { 0x57, 0xED, 0xF4, 0xA2, 0x2B, 0xE3, 0xC9, 0x55, 0xAC, 0x49, 0xDA,
          0x2E, 0x21, 0x07, 0xB6, 0x7A },
    },
};

TEST(MD5Test, Hash)
{
    ByteVector out(MD5::digest_size);

    for (auto &[message, digest]: md5_test_data) {
        MD5::hash(message.data(), message.size(), out.data());

        ASSERT_EQ(out, digest);
    }
}

} // namespace hlib::test
